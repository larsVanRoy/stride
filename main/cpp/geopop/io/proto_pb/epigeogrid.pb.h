// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: epigeogrid.proto

#ifndef PROTOBUF_INCLUDED_epigeogrid_2eproto
#define PROTOBUF_INCLUDED_epigeogrid_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_epigeogrid_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_epigeogrid_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_epigeogrid_2eproto();
namespace proto {
class EpiGeoGrid;
class EpiGeoGridDefaultTypeInternal;
extern EpiGeoGridDefaultTypeInternal _EpiGeoGrid_default_instance_;
class EpiGeoGrid_History;
class EpiGeoGrid_HistoryDefaultTypeInternal;
extern EpiGeoGrid_HistoryDefaultTypeInternal _EpiGeoGrid_History_default_instance_;
class EpiGeoGrid_History_PoolsForLocation;
class EpiGeoGrid_History_PoolsForLocationDefaultTypeInternal;
extern EpiGeoGrid_History_PoolsForLocationDefaultTypeInternal _EpiGeoGrid_History_PoolsForLocation_default_instance_;
class EpiGeoGrid_History_PoolsForLocation_Pool;
class EpiGeoGrid_History_PoolsForLocation_PoolDefaultTypeInternal;
extern EpiGeoGrid_History_PoolsForLocation_PoolDefaultTypeInternal _EpiGeoGrid_History_PoolsForLocation_Pool_default_instance_;
class EpiGeoGrid_Location;
class EpiGeoGrid_LocationDefaultTypeInternal;
extern EpiGeoGrid_LocationDefaultTypeInternal _EpiGeoGrid_Location_default_instance_;
class EpiGeoGrid_Location_Coordinates;
class EpiGeoGrid_Location_CoordinatesDefaultTypeInternal;
extern EpiGeoGrid_Location_CoordinatesDefaultTypeInternal _EpiGeoGrid_Location_Coordinates_default_instance_;
}  // namespace proto
namespace google {
namespace protobuf {
template<> ::proto::EpiGeoGrid* Arena::CreateMaybeMessage<::proto::EpiGeoGrid>(Arena*);
template<> ::proto::EpiGeoGrid_History* Arena::CreateMaybeMessage<::proto::EpiGeoGrid_History>(Arena*);
template<> ::proto::EpiGeoGrid_History_PoolsForLocation* Arena::CreateMaybeMessage<::proto::EpiGeoGrid_History_PoolsForLocation>(Arena*);
template<> ::proto::EpiGeoGrid_History_PoolsForLocation_Pool* Arena::CreateMaybeMessage<::proto::EpiGeoGrid_History_PoolsForLocation_Pool>(Arena*);
template<> ::proto::EpiGeoGrid_Location* Arena::CreateMaybeMessage<::proto::EpiGeoGrid_Location>(Arena*);
template<> ::proto::EpiGeoGrid_Location_Coordinates* Arena::CreateMaybeMessage<::proto::EpiGeoGrid_Location_Coordinates>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace proto {

enum EpiGeoGrid_History_PoolsForLocation_Pool_Type {
  EpiGeoGrid_History_PoolsForLocation_Pool_Type_K12School = 0,
  EpiGeoGrid_History_PoolsForLocation_Pool_Type_PrimaryCommunity = 1,
  EpiGeoGrid_History_PoolsForLocation_Pool_Type_SecondaryCommunity = 2,
  EpiGeoGrid_History_PoolsForLocation_Pool_Type_College = 3,
  EpiGeoGrid_History_PoolsForLocation_Pool_Type_Household = 4,
  EpiGeoGrid_History_PoolsForLocation_Pool_Type_Workplace = 5,
  EpiGeoGrid_History_PoolsForLocation_Pool_Type_Daycare = 6,
  EpiGeoGrid_History_PoolsForLocation_Pool_Type_PreSchool = 7,
  EpiGeoGrid_History_PoolsForLocation_Pool_Type_EpiGeoGrid_History_PoolsForLocation_Pool_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  EpiGeoGrid_History_PoolsForLocation_Pool_Type_EpiGeoGrid_History_PoolsForLocation_Pool_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool EpiGeoGrid_History_PoolsForLocation_Pool_Type_IsValid(int value);
const EpiGeoGrid_History_PoolsForLocation_Pool_Type EpiGeoGrid_History_PoolsForLocation_Pool_Type_Type_MIN = EpiGeoGrid_History_PoolsForLocation_Pool_Type_K12School;
const EpiGeoGrid_History_PoolsForLocation_Pool_Type EpiGeoGrid_History_PoolsForLocation_Pool_Type_Type_MAX = EpiGeoGrid_History_PoolsForLocation_Pool_Type_PreSchool;
const int EpiGeoGrid_History_PoolsForLocation_Pool_Type_Type_ARRAYSIZE = EpiGeoGrid_History_PoolsForLocation_Pool_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* EpiGeoGrid_History_PoolsForLocation_Pool_Type_descriptor();
inline const ::std::string& EpiGeoGrid_History_PoolsForLocation_Pool_Type_Name(EpiGeoGrid_History_PoolsForLocation_Pool_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    EpiGeoGrid_History_PoolsForLocation_Pool_Type_descriptor(), value);
}
inline bool EpiGeoGrid_History_PoolsForLocation_Pool_Type_Parse(
    const ::std::string& name, EpiGeoGrid_History_PoolsForLocation_Pool_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EpiGeoGrid_History_PoolsForLocation_Pool_Type>(
    EpiGeoGrid_History_PoolsForLocation_Pool_Type_descriptor(), name, value);
}
// ===================================================================

class EpiGeoGrid_Location_Coordinates :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.EpiGeoGrid.Location.Coordinates) */ {
 public:
  EpiGeoGrid_Location_Coordinates();
  virtual ~EpiGeoGrid_Location_Coordinates();

  EpiGeoGrid_Location_Coordinates(const EpiGeoGrid_Location_Coordinates& from);

  inline EpiGeoGrid_Location_Coordinates& operator=(const EpiGeoGrid_Location_Coordinates& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EpiGeoGrid_Location_Coordinates(EpiGeoGrid_Location_Coordinates&& from) noexcept
    : EpiGeoGrid_Location_Coordinates() {
    *this = ::std::move(from);
  }

  inline EpiGeoGrid_Location_Coordinates& operator=(EpiGeoGrid_Location_Coordinates&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const EpiGeoGrid_Location_Coordinates& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EpiGeoGrid_Location_Coordinates* internal_default_instance() {
    return reinterpret_cast<const EpiGeoGrid_Location_Coordinates*>(
               &_EpiGeoGrid_Location_Coordinates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(EpiGeoGrid_Location_Coordinates* other);
  friend void swap(EpiGeoGrid_Location_Coordinates& a, EpiGeoGrid_Location_Coordinates& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EpiGeoGrid_Location_Coordinates* New() const final {
    return CreateMaybeMessage<EpiGeoGrid_Location_Coordinates>(nullptr);
  }

  EpiGeoGrid_Location_Coordinates* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EpiGeoGrid_Location_Coordinates>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EpiGeoGrid_Location_Coordinates& from);
  void MergeFrom(const EpiGeoGrid_Location_Coordinates& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EpiGeoGrid_Location_Coordinates* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double latitude = 1;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 1;
  double latitude() const;
  void set_latitude(double value);

  // double longitude = 2;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 2;
  double longitude() const;
  void set_longitude(double value);

  // @@protoc_insertion_point(class_scope:proto.EpiGeoGrid.Location.Coordinates)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double latitude_;
  double longitude_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epigeogrid_2eproto;
};
// -------------------------------------------------------------------

class EpiGeoGrid_Location :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.EpiGeoGrid.Location) */ {
 public:
  EpiGeoGrid_Location();
  virtual ~EpiGeoGrid_Location();

  EpiGeoGrid_Location(const EpiGeoGrid_Location& from);

  inline EpiGeoGrid_Location& operator=(const EpiGeoGrid_Location& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EpiGeoGrid_Location(EpiGeoGrid_Location&& from) noexcept
    : EpiGeoGrid_Location() {
    *this = ::std::move(from);
  }

  inline EpiGeoGrid_Location& operator=(EpiGeoGrid_Location&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const EpiGeoGrid_Location& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EpiGeoGrid_Location* internal_default_instance() {
    return reinterpret_cast<const EpiGeoGrid_Location*>(
               &_EpiGeoGrid_Location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(EpiGeoGrid_Location* other);
  friend void swap(EpiGeoGrid_Location& a, EpiGeoGrid_Location& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EpiGeoGrid_Location* New() const final {
    return CreateMaybeMessage<EpiGeoGrid_Location>(nullptr);
  }

  EpiGeoGrid_Location* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EpiGeoGrid_Location>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EpiGeoGrid_Location& from);
  void MergeFrom(const EpiGeoGrid_Location& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EpiGeoGrid_Location* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef EpiGeoGrid_Location_Coordinates Coordinates;

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .proto.EpiGeoGrid.Location.Coordinates coordinates = 4;
  bool has_coordinates() const;
  void clear_coordinates();
  static const int kCoordinatesFieldNumber = 4;
  const ::proto::EpiGeoGrid_Location_Coordinates& coordinates() const;
  ::proto::EpiGeoGrid_Location_Coordinates* release_coordinates();
  ::proto::EpiGeoGrid_Location_Coordinates* mutable_coordinates();
  void set_allocated_coordinates(::proto::EpiGeoGrid_Location_Coordinates* coordinates);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 population = 3;
  void clear_population();
  static const int kPopulationFieldNumber = 3;
  ::google::protobuf::int32 population() const;
  void set_population(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.EpiGeoGrid.Location)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::proto::EpiGeoGrid_Location_Coordinates* coordinates_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 population_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epigeogrid_2eproto;
};
// -------------------------------------------------------------------

class EpiGeoGrid_History_PoolsForLocation_Pool :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.EpiGeoGrid.History.PoolsForLocation.Pool) */ {
 public:
  EpiGeoGrid_History_PoolsForLocation_Pool();
  virtual ~EpiGeoGrid_History_PoolsForLocation_Pool();

  EpiGeoGrid_History_PoolsForLocation_Pool(const EpiGeoGrid_History_PoolsForLocation_Pool& from);

  inline EpiGeoGrid_History_PoolsForLocation_Pool& operator=(const EpiGeoGrid_History_PoolsForLocation_Pool& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EpiGeoGrid_History_PoolsForLocation_Pool(EpiGeoGrid_History_PoolsForLocation_Pool&& from) noexcept
    : EpiGeoGrid_History_PoolsForLocation_Pool() {
    *this = ::std::move(from);
  }

  inline EpiGeoGrid_History_PoolsForLocation_Pool& operator=(EpiGeoGrid_History_PoolsForLocation_Pool&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const EpiGeoGrid_History_PoolsForLocation_Pool& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EpiGeoGrid_History_PoolsForLocation_Pool* internal_default_instance() {
    return reinterpret_cast<const EpiGeoGrid_History_PoolsForLocation_Pool*>(
               &_EpiGeoGrid_History_PoolsForLocation_Pool_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(EpiGeoGrid_History_PoolsForLocation_Pool* other);
  friend void swap(EpiGeoGrid_History_PoolsForLocation_Pool& a, EpiGeoGrid_History_PoolsForLocation_Pool& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EpiGeoGrid_History_PoolsForLocation_Pool* New() const final {
    return CreateMaybeMessage<EpiGeoGrid_History_PoolsForLocation_Pool>(nullptr);
  }

  EpiGeoGrid_History_PoolsForLocation_Pool* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EpiGeoGrid_History_PoolsForLocation_Pool>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EpiGeoGrid_History_PoolsForLocation_Pool& from);
  void MergeFrom(const EpiGeoGrid_History_PoolsForLocation_Pool& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EpiGeoGrid_History_PoolsForLocation_Pool* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef EpiGeoGrid_History_PoolsForLocation_Pool_Type Type;
  static const Type K12School =
    EpiGeoGrid_History_PoolsForLocation_Pool_Type_K12School;
  static const Type PrimaryCommunity =
    EpiGeoGrid_History_PoolsForLocation_Pool_Type_PrimaryCommunity;
  static const Type SecondaryCommunity =
    EpiGeoGrid_History_PoolsForLocation_Pool_Type_SecondaryCommunity;
  static const Type College =
    EpiGeoGrid_History_PoolsForLocation_Pool_Type_College;
  static const Type Household =
    EpiGeoGrid_History_PoolsForLocation_Pool_Type_Household;
  static const Type Workplace =
    EpiGeoGrid_History_PoolsForLocation_Pool_Type_Workplace;
  static const Type Daycare =
    EpiGeoGrid_History_PoolsForLocation_Pool_Type_Daycare;
  static const Type PreSchool =
    EpiGeoGrid_History_PoolsForLocation_Pool_Type_PreSchool;
  static inline bool Type_IsValid(int value) {
    return EpiGeoGrid_History_PoolsForLocation_Pool_Type_IsValid(value);
  }
  static const Type Type_MIN =
    EpiGeoGrid_History_PoolsForLocation_Pool_Type_Type_MIN;
  static const Type Type_MAX =
    EpiGeoGrid_History_PoolsForLocation_Pool_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    EpiGeoGrid_History_PoolsForLocation_Pool_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return EpiGeoGrid_History_PoolsForLocation_Pool_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return EpiGeoGrid_History_PoolsForLocation_Pool_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return EpiGeoGrid_History_PoolsForLocation_Pool_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated double percentage = 1;
  int percentage_size() const;
  void clear_percentage();
  static const int kPercentageFieldNumber = 1;
  double percentage(int index) const;
  void set_percentage(int index, double value);
  void add_percentage(double value);
  const ::google::protobuf::RepeatedField< double >&
      percentage() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_percentage();

  // .proto.EpiGeoGrid.History.PoolsForLocation.Pool.Type type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::proto::EpiGeoGrid_History_PoolsForLocation_Pool_Type type() const;
  void set_type(::proto::EpiGeoGrid_History_PoolsForLocation_Pool_Type value);

  // @@protoc_insertion_point(class_scope:proto.EpiGeoGrid.History.PoolsForLocation.Pool)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< double > percentage_;
  mutable std::atomic<int> _percentage_cached_byte_size_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epigeogrid_2eproto;
};
// -------------------------------------------------------------------

class EpiGeoGrid_History_PoolsForLocation :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.EpiGeoGrid.History.PoolsForLocation) */ {
 public:
  EpiGeoGrid_History_PoolsForLocation();
  virtual ~EpiGeoGrid_History_PoolsForLocation();

  EpiGeoGrid_History_PoolsForLocation(const EpiGeoGrid_History_PoolsForLocation& from);

  inline EpiGeoGrid_History_PoolsForLocation& operator=(const EpiGeoGrid_History_PoolsForLocation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EpiGeoGrid_History_PoolsForLocation(EpiGeoGrid_History_PoolsForLocation&& from) noexcept
    : EpiGeoGrid_History_PoolsForLocation() {
    *this = ::std::move(from);
  }

  inline EpiGeoGrid_History_PoolsForLocation& operator=(EpiGeoGrid_History_PoolsForLocation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const EpiGeoGrid_History_PoolsForLocation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EpiGeoGrid_History_PoolsForLocation* internal_default_instance() {
    return reinterpret_cast<const EpiGeoGrid_History_PoolsForLocation*>(
               &_EpiGeoGrid_History_PoolsForLocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(EpiGeoGrid_History_PoolsForLocation* other);
  friend void swap(EpiGeoGrid_History_PoolsForLocation& a, EpiGeoGrid_History_PoolsForLocation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EpiGeoGrid_History_PoolsForLocation* New() const final {
    return CreateMaybeMessage<EpiGeoGrid_History_PoolsForLocation>(nullptr);
  }

  EpiGeoGrid_History_PoolsForLocation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EpiGeoGrid_History_PoolsForLocation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EpiGeoGrid_History_PoolsForLocation& from);
  void MergeFrom(const EpiGeoGrid_History_PoolsForLocation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EpiGeoGrid_History_PoolsForLocation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef EpiGeoGrid_History_PoolsForLocation_Pool Pool;

  // accessors -------------------------------------------------------

  // repeated .proto.EpiGeoGrid.History.PoolsForLocation.Pool pools = 2;
  int pools_size() const;
  void clear_pools();
  static const int kPoolsFieldNumber = 2;
  ::proto::EpiGeoGrid_History_PoolsForLocation_Pool* mutable_pools(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::EpiGeoGrid_History_PoolsForLocation_Pool >*
      mutable_pools();
  const ::proto::EpiGeoGrid_History_PoolsForLocation_Pool& pools(int index) const;
  ::proto::EpiGeoGrid_History_PoolsForLocation_Pool* add_pools();
  const ::google::protobuf::RepeatedPtrField< ::proto::EpiGeoGrid_History_PoolsForLocation_Pool >&
      pools() const;

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.EpiGeoGrid.History.PoolsForLocation)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::EpiGeoGrid_History_PoolsForLocation_Pool > pools_;
  ::google::protobuf::int32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epigeogrid_2eproto;
};
// -------------------------------------------------------------------

class EpiGeoGrid_History :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.EpiGeoGrid.History) */ {
 public:
  EpiGeoGrid_History();
  virtual ~EpiGeoGrid_History();

  EpiGeoGrid_History(const EpiGeoGrid_History& from);

  inline EpiGeoGrid_History& operator=(const EpiGeoGrid_History& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EpiGeoGrid_History(EpiGeoGrid_History&& from) noexcept
    : EpiGeoGrid_History() {
    *this = ::std::move(from);
  }

  inline EpiGeoGrid_History& operator=(EpiGeoGrid_History&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const EpiGeoGrid_History& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EpiGeoGrid_History* internal_default_instance() {
    return reinterpret_cast<const EpiGeoGrid_History*>(
               &_EpiGeoGrid_History_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(EpiGeoGrid_History* other);
  friend void swap(EpiGeoGrid_History& a, EpiGeoGrid_History& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EpiGeoGrid_History* New() const final {
    return CreateMaybeMessage<EpiGeoGrid_History>(nullptr);
  }

  EpiGeoGrid_History* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EpiGeoGrid_History>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EpiGeoGrid_History& from);
  void MergeFrom(const EpiGeoGrid_History& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EpiGeoGrid_History* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef EpiGeoGrid_History_PoolsForLocation PoolsForLocation;

  // accessors -------------------------------------------------------

  // repeated .proto.EpiGeoGrid.History.PoolsForLocation PoolsForLocations = 1;
  int poolsforlocations_size() const;
  void clear_poolsforlocations();
  static const int kPoolsForLocationsFieldNumber = 1;
  ::proto::EpiGeoGrid_History_PoolsForLocation* mutable_poolsforlocations(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::EpiGeoGrid_History_PoolsForLocation >*
      mutable_poolsforlocations();
  const ::proto::EpiGeoGrid_History_PoolsForLocation& poolsforlocations(int index) const;
  ::proto::EpiGeoGrid_History_PoolsForLocation* add_poolsforlocations();
  const ::google::protobuf::RepeatedPtrField< ::proto::EpiGeoGrid_History_PoolsForLocation >&
      poolsforlocations() const;

  // int32 timestep = 2;
  void clear_timestep();
  static const int kTimestepFieldNumber = 2;
  ::google::protobuf::int32 timestep() const;
  void set_timestep(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.EpiGeoGrid.History)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::EpiGeoGrid_History_PoolsForLocation > poolsforlocations_;
  ::google::protobuf::int32 timestep_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epigeogrid_2eproto;
};
// -------------------------------------------------------------------

class EpiGeoGrid :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.EpiGeoGrid) */ {
 public:
  EpiGeoGrid();
  virtual ~EpiGeoGrid();

  EpiGeoGrid(const EpiGeoGrid& from);

  inline EpiGeoGrid& operator=(const EpiGeoGrid& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EpiGeoGrid(EpiGeoGrid&& from) noexcept
    : EpiGeoGrid() {
    *this = ::std::move(from);
  }

  inline EpiGeoGrid& operator=(EpiGeoGrid&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const EpiGeoGrid& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EpiGeoGrid* internal_default_instance() {
    return reinterpret_cast<const EpiGeoGrid*>(
               &_EpiGeoGrid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(EpiGeoGrid* other);
  friend void swap(EpiGeoGrid& a, EpiGeoGrid& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EpiGeoGrid* New() const final {
    return CreateMaybeMessage<EpiGeoGrid>(nullptr);
  }

  EpiGeoGrid* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EpiGeoGrid>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EpiGeoGrid& from);
  void MergeFrom(const EpiGeoGrid& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EpiGeoGrid* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef EpiGeoGrid_Location Location;
  typedef EpiGeoGrid_History History;

  // accessors -------------------------------------------------------

  // repeated .proto.EpiGeoGrid.Location Locations = 1;
  int locations_size() const;
  void clear_locations();
  static const int kLocationsFieldNumber = 1;
  ::proto::EpiGeoGrid_Location* mutable_locations(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::EpiGeoGrid_Location >*
      mutable_locations();
  const ::proto::EpiGeoGrid_Location& locations(int index) const;
  ::proto::EpiGeoGrid_Location* add_locations();
  const ::google::protobuf::RepeatedPtrField< ::proto::EpiGeoGrid_Location >&
      locations() const;

  // repeated .proto.EpiGeoGrid.History history = 2;
  int history_size() const;
  void clear_history();
  static const int kHistoryFieldNumber = 2;
  ::proto::EpiGeoGrid_History* mutable_history(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::EpiGeoGrid_History >*
      mutable_history();
  const ::proto::EpiGeoGrid_History& history(int index) const;
  ::proto::EpiGeoGrid_History* add_history();
  const ::google::protobuf::RepeatedPtrField< ::proto::EpiGeoGrid_History >&
      history() const;

  // @@protoc_insertion_point(class_scope:proto.EpiGeoGrid)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::EpiGeoGrid_Location > locations_;
  ::google::protobuf::RepeatedPtrField< ::proto::EpiGeoGrid_History > history_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epigeogrid_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EpiGeoGrid_Location_Coordinates

// double latitude = 1;
inline void EpiGeoGrid_Location_Coordinates::clear_latitude() {
  latitude_ = 0;
}
inline double EpiGeoGrid_Location_Coordinates::latitude() const {
  // @@protoc_insertion_point(field_get:proto.EpiGeoGrid.Location.Coordinates.latitude)
  return latitude_;
}
inline void EpiGeoGrid_Location_Coordinates::set_latitude(double value) {
  
  latitude_ = value;
  // @@protoc_insertion_point(field_set:proto.EpiGeoGrid.Location.Coordinates.latitude)
}

// double longitude = 2;
inline void EpiGeoGrid_Location_Coordinates::clear_longitude() {
  longitude_ = 0;
}
inline double EpiGeoGrid_Location_Coordinates::longitude() const {
  // @@protoc_insertion_point(field_get:proto.EpiGeoGrid.Location.Coordinates.longitude)
  return longitude_;
}
inline void EpiGeoGrid_Location_Coordinates::set_longitude(double value) {
  
  longitude_ = value;
  // @@protoc_insertion_point(field_set:proto.EpiGeoGrid.Location.Coordinates.longitude)
}

// -------------------------------------------------------------------

// EpiGeoGrid_Location

// int32 id = 1;
inline void EpiGeoGrid_Location::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 EpiGeoGrid_Location::id() const {
  // @@protoc_insertion_point(field_get:proto.EpiGeoGrid.Location.id)
  return id_;
}
inline void EpiGeoGrid_Location::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.EpiGeoGrid.Location.id)
}

// string name = 2;
inline void EpiGeoGrid_Location::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EpiGeoGrid_Location::name() const {
  // @@protoc_insertion_point(field_get:proto.EpiGeoGrid.Location.name)
  return name_.GetNoArena();
}
inline void EpiGeoGrid_Location::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.EpiGeoGrid.Location.name)
}
#if LANG_CXX11
inline void EpiGeoGrid_Location::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.EpiGeoGrid.Location.name)
}
#endif
inline void EpiGeoGrid_Location::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.EpiGeoGrid.Location.name)
}
inline void EpiGeoGrid_Location::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.EpiGeoGrid.Location.name)
}
inline ::std::string* EpiGeoGrid_Location::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.EpiGeoGrid.Location.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EpiGeoGrid_Location::release_name() {
  // @@protoc_insertion_point(field_release:proto.EpiGeoGrid.Location.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EpiGeoGrid_Location::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.EpiGeoGrid.Location.name)
}

// int32 population = 3;
inline void EpiGeoGrid_Location::clear_population() {
  population_ = 0;
}
inline ::google::protobuf::int32 EpiGeoGrid_Location::population() const {
  // @@protoc_insertion_point(field_get:proto.EpiGeoGrid.Location.population)
  return population_;
}
inline void EpiGeoGrid_Location::set_population(::google::protobuf::int32 value) {
  
  population_ = value;
  // @@protoc_insertion_point(field_set:proto.EpiGeoGrid.Location.population)
}

// .proto.EpiGeoGrid.Location.Coordinates coordinates = 4;
inline bool EpiGeoGrid_Location::has_coordinates() const {
  return this != internal_default_instance() && coordinates_ != nullptr;
}
inline void EpiGeoGrid_Location::clear_coordinates() {
  if (GetArenaNoVirtual() == nullptr && coordinates_ != nullptr) {
    delete coordinates_;
  }
  coordinates_ = nullptr;
}
inline const ::proto::EpiGeoGrid_Location_Coordinates& EpiGeoGrid_Location::coordinates() const {
  const ::proto::EpiGeoGrid_Location_Coordinates* p = coordinates_;
  // @@protoc_insertion_point(field_get:proto.EpiGeoGrid.Location.coordinates)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::EpiGeoGrid_Location_Coordinates*>(
      &::proto::_EpiGeoGrid_Location_Coordinates_default_instance_);
}
inline ::proto::EpiGeoGrid_Location_Coordinates* EpiGeoGrid_Location::release_coordinates() {
  // @@protoc_insertion_point(field_release:proto.EpiGeoGrid.Location.coordinates)
  
  ::proto::EpiGeoGrid_Location_Coordinates* temp = coordinates_;
  coordinates_ = nullptr;
  return temp;
}
inline ::proto::EpiGeoGrid_Location_Coordinates* EpiGeoGrid_Location::mutable_coordinates() {
  
  if (coordinates_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::EpiGeoGrid_Location_Coordinates>(GetArenaNoVirtual());
    coordinates_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.EpiGeoGrid.Location.coordinates)
  return coordinates_;
}
inline void EpiGeoGrid_Location::set_allocated_coordinates(::proto::EpiGeoGrid_Location_Coordinates* coordinates) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete coordinates_;
  }
  if (coordinates) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      coordinates = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, coordinates, submessage_arena);
    }
    
  } else {
    
  }
  coordinates_ = coordinates;
  // @@protoc_insertion_point(field_set_allocated:proto.EpiGeoGrid.Location.coordinates)
}

// -------------------------------------------------------------------

// EpiGeoGrid_History_PoolsForLocation_Pool

// repeated double percentage = 1;
inline int EpiGeoGrid_History_PoolsForLocation_Pool::percentage_size() const {
  return percentage_.size();
}
inline void EpiGeoGrid_History_PoolsForLocation_Pool::clear_percentage() {
  percentage_.Clear();
}
inline double EpiGeoGrid_History_PoolsForLocation_Pool::percentage(int index) const {
  // @@protoc_insertion_point(field_get:proto.EpiGeoGrid.History.PoolsForLocation.Pool.percentage)
  return percentage_.Get(index);
}
inline void EpiGeoGrid_History_PoolsForLocation_Pool::set_percentage(int index, double value) {
  percentage_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.EpiGeoGrid.History.PoolsForLocation.Pool.percentage)
}
inline void EpiGeoGrid_History_PoolsForLocation_Pool::add_percentage(double value) {
  percentage_.Add(value);
  // @@protoc_insertion_point(field_add:proto.EpiGeoGrid.History.PoolsForLocation.Pool.percentage)
}
inline const ::google::protobuf::RepeatedField< double >&
EpiGeoGrid_History_PoolsForLocation_Pool::percentage() const {
  // @@protoc_insertion_point(field_list:proto.EpiGeoGrid.History.PoolsForLocation.Pool.percentage)
  return percentage_;
}
inline ::google::protobuf::RepeatedField< double >*
EpiGeoGrid_History_PoolsForLocation_Pool::mutable_percentage() {
  // @@protoc_insertion_point(field_mutable_list:proto.EpiGeoGrid.History.PoolsForLocation.Pool.percentage)
  return &percentage_;
}

// .proto.EpiGeoGrid.History.PoolsForLocation.Pool.Type type = 2;
inline void EpiGeoGrid_History_PoolsForLocation_Pool::clear_type() {
  type_ = 0;
}
inline ::proto::EpiGeoGrid_History_PoolsForLocation_Pool_Type EpiGeoGrid_History_PoolsForLocation_Pool::type() const {
  // @@protoc_insertion_point(field_get:proto.EpiGeoGrid.History.PoolsForLocation.Pool.type)
  return static_cast< ::proto::EpiGeoGrid_History_PoolsForLocation_Pool_Type >(type_);
}
inline void EpiGeoGrid_History_PoolsForLocation_Pool::set_type(::proto::EpiGeoGrid_History_PoolsForLocation_Pool_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.EpiGeoGrid.History.PoolsForLocation.Pool.type)
}

// -------------------------------------------------------------------

// EpiGeoGrid_History_PoolsForLocation

// int32 id = 1;
inline void EpiGeoGrid_History_PoolsForLocation::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 EpiGeoGrid_History_PoolsForLocation::id() const {
  // @@protoc_insertion_point(field_get:proto.EpiGeoGrid.History.PoolsForLocation.id)
  return id_;
}
inline void EpiGeoGrid_History_PoolsForLocation::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.EpiGeoGrid.History.PoolsForLocation.id)
}

// repeated .proto.EpiGeoGrid.History.PoolsForLocation.Pool pools = 2;
inline int EpiGeoGrid_History_PoolsForLocation::pools_size() const {
  return pools_.size();
}
inline void EpiGeoGrid_History_PoolsForLocation::clear_pools() {
  pools_.Clear();
}
inline ::proto::EpiGeoGrid_History_PoolsForLocation_Pool* EpiGeoGrid_History_PoolsForLocation::mutable_pools(int index) {
  // @@protoc_insertion_point(field_mutable:proto.EpiGeoGrid.History.PoolsForLocation.pools)
  return pools_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::EpiGeoGrid_History_PoolsForLocation_Pool >*
EpiGeoGrid_History_PoolsForLocation::mutable_pools() {
  // @@protoc_insertion_point(field_mutable_list:proto.EpiGeoGrid.History.PoolsForLocation.pools)
  return &pools_;
}
inline const ::proto::EpiGeoGrid_History_PoolsForLocation_Pool& EpiGeoGrid_History_PoolsForLocation::pools(int index) const {
  // @@protoc_insertion_point(field_get:proto.EpiGeoGrid.History.PoolsForLocation.pools)
  return pools_.Get(index);
}
inline ::proto::EpiGeoGrid_History_PoolsForLocation_Pool* EpiGeoGrid_History_PoolsForLocation::add_pools() {
  // @@protoc_insertion_point(field_add:proto.EpiGeoGrid.History.PoolsForLocation.pools)
  return pools_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::EpiGeoGrid_History_PoolsForLocation_Pool >&
EpiGeoGrid_History_PoolsForLocation::pools() const {
  // @@protoc_insertion_point(field_list:proto.EpiGeoGrid.History.PoolsForLocation.pools)
  return pools_;
}

// -------------------------------------------------------------------

// EpiGeoGrid_History

// repeated .proto.EpiGeoGrid.History.PoolsForLocation PoolsForLocations = 1;
inline int EpiGeoGrid_History::poolsforlocations_size() const {
  return poolsforlocations_.size();
}
inline void EpiGeoGrid_History::clear_poolsforlocations() {
  poolsforlocations_.Clear();
}
inline ::proto::EpiGeoGrid_History_PoolsForLocation* EpiGeoGrid_History::mutable_poolsforlocations(int index) {
  // @@protoc_insertion_point(field_mutable:proto.EpiGeoGrid.History.PoolsForLocations)
  return poolsforlocations_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::EpiGeoGrid_History_PoolsForLocation >*
EpiGeoGrid_History::mutable_poolsforlocations() {
  // @@protoc_insertion_point(field_mutable_list:proto.EpiGeoGrid.History.PoolsForLocations)
  return &poolsforlocations_;
}
inline const ::proto::EpiGeoGrid_History_PoolsForLocation& EpiGeoGrid_History::poolsforlocations(int index) const {
  // @@protoc_insertion_point(field_get:proto.EpiGeoGrid.History.PoolsForLocations)
  return poolsforlocations_.Get(index);
}
inline ::proto::EpiGeoGrid_History_PoolsForLocation* EpiGeoGrid_History::add_poolsforlocations() {
  // @@protoc_insertion_point(field_add:proto.EpiGeoGrid.History.PoolsForLocations)
  return poolsforlocations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::EpiGeoGrid_History_PoolsForLocation >&
EpiGeoGrid_History::poolsforlocations() const {
  // @@protoc_insertion_point(field_list:proto.EpiGeoGrid.History.PoolsForLocations)
  return poolsforlocations_;
}

// int32 timestep = 2;
inline void EpiGeoGrid_History::clear_timestep() {
  timestep_ = 0;
}
inline ::google::protobuf::int32 EpiGeoGrid_History::timestep() const {
  // @@protoc_insertion_point(field_get:proto.EpiGeoGrid.History.timestep)
  return timestep_;
}
inline void EpiGeoGrid_History::set_timestep(::google::protobuf::int32 value) {
  
  timestep_ = value;
  // @@protoc_insertion_point(field_set:proto.EpiGeoGrid.History.timestep)
}

// -------------------------------------------------------------------

// EpiGeoGrid

// repeated .proto.EpiGeoGrid.Location Locations = 1;
inline int EpiGeoGrid::locations_size() const {
  return locations_.size();
}
inline void EpiGeoGrid::clear_locations() {
  locations_.Clear();
}
inline ::proto::EpiGeoGrid_Location* EpiGeoGrid::mutable_locations(int index) {
  // @@protoc_insertion_point(field_mutable:proto.EpiGeoGrid.Locations)
  return locations_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::EpiGeoGrid_Location >*
EpiGeoGrid::mutable_locations() {
  // @@protoc_insertion_point(field_mutable_list:proto.EpiGeoGrid.Locations)
  return &locations_;
}
inline const ::proto::EpiGeoGrid_Location& EpiGeoGrid::locations(int index) const {
  // @@protoc_insertion_point(field_get:proto.EpiGeoGrid.Locations)
  return locations_.Get(index);
}
inline ::proto::EpiGeoGrid_Location* EpiGeoGrid::add_locations() {
  // @@protoc_insertion_point(field_add:proto.EpiGeoGrid.Locations)
  return locations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::EpiGeoGrid_Location >&
EpiGeoGrid::locations() const {
  // @@protoc_insertion_point(field_list:proto.EpiGeoGrid.Locations)
  return locations_;
}

// repeated .proto.EpiGeoGrid.History history = 2;
inline int EpiGeoGrid::history_size() const {
  return history_.size();
}
inline void EpiGeoGrid::clear_history() {
  history_.Clear();
}
inline ::proto::EpiGeoGrid_History* EpiGeoGrid::mutable_history(int index) {
  // @@protoc_insertion_point(field_mutable:proto.EpiGeoGrid.history)
  return history_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::EpiGeoGrid_History >*
EpiGeoGrid::mutable_history() {
  // @@protoc_insertion_point(field_mutable_list:proto.EpiGeoGrid.history)
  return &history_;
}
inline const ::proto::EpiGeoGrid_History& EpiGeoGrid::history(int index) const {
  // @@protoc_insertion_point(field_get:proto.EpiGeoGrid.history)
  return history_.Get(index);
}
inline ::proto::EpiGeoGrid_History* EpiGeoGrid::add_history() {
  // @@protoc_insertion_point(field_add:proto.EpiGeoGrid.history)
  return history_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::EpiGeoGrid_History >&
EpiGeoGrid::history() const {
  // @@protoc_insertion_point(field_list:proto.EpiGeoGrid.history)
  return history_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::proto::EpiGeoGrid_History_PoolsForLocation_Pool_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::EpiGeoGrid_History_PoolsForLocation_Pool_Type>() {
  return ::proto::EpiGeoGrid_History_PoolsForLocation_Pool_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_epigeogrid_2eproto
