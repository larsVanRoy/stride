// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: epigeogrid.proto

#include "epigeogrid.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_epigeogrid_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_EpiGeoGrid_History_PoolsForLocation_Pool_epigeogrid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_epigeogrid_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_EpiGeoGrid_Location_Coordinates_epigeogrid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_epigeogrid_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_EpiGeoGrid_History_PoolsForLocation_epigeogrid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_epigeogrid_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_EpiGeoGrid_History_epigeogrid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_epigeogrid_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_EpiGeoGrid_Location_epigeogrid_2eproto;
namespace proto {
class EpiGeoGrid_Location_CoordinatesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EpiGeoGrid_Location_Coordinates> _instance;
} _EpiGeoGrid_Location_Coordinates_default_instance_;
class EpiGeoGrid_LocationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EpiGeoGrid_Location> _instance;
} _EpiGeoGrid_Location_default_instance_;
class EpiGeoGrid_History_PoolsForLocation_PoolDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EpiGeoGrid_History_PoolsForLocation_Pool> _instance;
} _EpiGeoGrid_History_PoolsForLocation_Pool_default_instance_;
class EpiGeoGrid_History_PoolsForLocationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EpiGeoGrid_History_PoolsForLocation> _instance;
} _EpiGeoGrid_History_PoolsForLocation_default_instance_;
class EpiGeoGrid_HistoryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EpiGeoGrid_History> _instance;
} _EpiGeoGrid_History_default_instance_;
class EpiGeoGridDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EpiGeoGrid> _instance;
} _EpiGeoGrid_default_instance_;
}  // namespace proto
static void InitDefaultsEpiGeoGrid_Location_Coordinates_epigeogrid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_EpiGeoGrid_Location_Coordinates_default_instance_;
    new (ptr) ::proto::EpiGeoGrid_Location_Coordinates();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::EpiGeoGrid_Location_Coordinates::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EpiGeoGrid_Location_Coordinates_epigeogrid_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEpiGeoGrid_Location_Coordinates_epigeogrid_2eproto}, {}};

static void InitDefaultsEpiGeoGrid_Location_epigeogrid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_EpiGeoGrid_Location_default_instance_;
    new (ptr) ::proto::EpiGeoGrid_Location();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::EpiGeoGrid_Location::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_EpiGeoGrid_Location_epigeogrid_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsEpiGeoGrid_Location_epigeogrid_2eproto}, {
      &scc_info_EpiGeoGrid_Location_Coordinates_epigeogrid_2eproto.base,}};

static void InitDefaultsEpiGeoGrid_History_PoolsForLocation_Pool_epigeogrid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_EpiGeoGrid_History_PoolsForLocation_Pool_default_instance_;
    new (ptr) ::proto::EpiGeoGrid_History_PoolsForLocation_Pool();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::EpiGeoGrid_History_PoolsForLocation_Pool::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EpiGeoGrid_History_PoolsForLocation_Pool_epigeogrid_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEpiGeoGrid_History_PoolsForLocation_Pool_epigeogrid_2eproto}, {}};

static void InitDefaultsEpiGeoGrid_History_PoolsForLocation_epigeogrid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_EpiGeoGrid_History_PoolsForLocation_default_instance_;
    new (ptr) ::proto::EpiGeoGrid_History_PoolsForLocation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::EpiGeoGrid_History_PoolsForLocation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_EpiGeoGrid_History_PoolsForLocation_epigeogrid_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsEpiGeoGrid_History_PoolsForLocation_epigeogrid_2eproto}, {
      &scc_info_EpiGeoGrid_History_PoolsForLocation_Pool_epigeogrid_2eproto.base,}};

static void InitDefaultsEpiGeoGrid_History_epigeogrid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_EpiGeoGrid_History_default_instance_;
    new (ptr) ::proto::EpiGeoGrid_History();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::EpiGeoGrid_History::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_EpiGeoGrid_History_epigeogrid_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsEpiGeoGrid_History_epigeogrid_2eproto}, {
      &scc_info_EpiGeoGrid_History_PoolsForLocation_epigeogrid_2eproto.base,}};

static void InitDefaultsEpiGeoGrid_epigeogrid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_EpiGeoGrid_default_instance_;
    new (ptr) ::proto::EpiGeoGrid();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::EpiGeoGrid::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_EpiGeoGrid_epigeogrid_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsEpiGeoGrid_epigeogrid_2eproto}, {
      &scc_info_EpiGeoGrid_Location_epigeogrid_2eproto.base,
      &scc_info_EpiGeoGrid_History_epigeogrid_2eproto.base,}};

void InitDefaults_epigeogrid_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_EpiGeoGrid_Location_Coordinates_epigeogrid_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EpiGeoGrid_Location_epigeogrid_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EpiGeoGrid_History_PoolsForLocation_Pool_epigeogrid_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EpiGeoGrid_History_PoolsForLocation_epigeogrid_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EpiGeoGrid_History_epigeogrid_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EpiGeoGrid_epigeogrid_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_epigeogrid_2eproto[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_epigeogrid_2eproto[1];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_epigeogrid_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_epigeogrid_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::EpiGeoGrid_Location_Coordinates, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::EpiGeoGrid_Location_Coordinates, latitude_),
  PROTOBUF_FIELD_OFFSET(::proto::EpiGeoGrid_Location_Coordinates, longitude_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::EpiGeoGrid_Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::EpiGeoGrid_Location, id_),
  PROTOBUF_FIELD_OFFSET(::proto::EpiGeoGrid_Location, name_),
  PROTOBUF_FIELD_OFFSET(::proto::EpiGeoGrid_Location, population_),
  PROTOBUF_FIELD_OFFSET(::proto::EpiGeoGrid_Location, coordinates_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::EpiGeoGrid_History_PoolsForLocation_Pool, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::EpiGeoGrid_History_PoolsForLocation_Pool, percentage_),
  PROTOBUF_FIELD_OFFSET(::proto::EpiGeoGrid_History_PoolsForLocation_Pool, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::EpiGeoGrid_History_PoolsForLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::EpiGeoGrid_History_PoolsForLocation, id_),
  PROTOBUF_FIELD_OFFSET(::proto::EpiGeoGrid_History_PoolsForLocation, pools_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::EpiGeoGrid_History, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::EpiGeoGrid_History, poolsforlocations_),
  PROTOBUF_FIELD_OFFSET(::proto::EpiGeoGrid_History, timestep_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::EpiGeoGrid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::EpiGeoGrid, locations_),
  PROTOBUF_FIELD_OFFSET(::proto::EpiGeoGrid, history_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::proto::EpiGeoGrid_Location_Coordinates)},
  { 7, -1, sizeof(::proto::EpiGeoGrid_Location)},
  { 16, -1, sizeof(::proto::EpiGeoGrid_History_PoolsForLocation_Pool)},
  { 23, -1, sizeof(::proto::EpiGeoGrid_History_PoolsForLocation)},
  { 30, -1, sizeof(::proto::EpiGeoGrid_History)},
  { 37, -1, sizeof(::proto::EpiGeoGrid)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::_EpiGeoGrid_Location_Coordinates_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::_EpiGeoGrid_Location_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::_EpiGeoGrid_History_PoolsForLocation_Pool_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::_EpiGeoGrid_History_PoolsForLocation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::_EpiGeoGrid_History_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::_EpiGeoGrid_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_epigeogrid_2eproto = {
  {}, AddDescriptors_epigeogrid_2eproto, "epigeogrid.proto", schemas,
  file_default_instances, TableStruct_epigeogrid_2eproto::offsets,
  file_level_metadata_epigeogrid_2eproto, 6, file_level_enum_descriptors_epigeogrid_2eproto, file_level_service_descriptors_epigeogrid_2eproto,
};

const char descriptor_table_protodef_epigeogrid_2eproto[] =
  "\n\020epigeogrid.proto\022\005proto\"\307\005\n\nEpiGeoGrid"
  "\022-\n\tLocations\030\001 \003(\0132\032.proto.EpiGeoGrid.L"
  "ocation\022*\n\007history\030\002 \003(\0132\031.proto.EpiGeoG"
  "rid.History\032\251\001\n\010Location\022\n\n\002id\030\001 \001(\005\022\014\n\004"
  "name\030\002 \001(\t\022\022\n\npopulation\030\003 \001(\005\022;\n\013coordi"
  "nates\030\004 \001(\0132&.proto.EpiGeoGrid.Location."
  "Coordinates\0322\n\013Coordinates\022\020\n\010latitude\030\001"
  " \001(\001\022\021\n\tlongitude\030\002 \001(\001\032\261\003\n\007History\022E\n\021P"
  "oolsForLocations\030\001 \003(\0132*.proto.EpiGeoGri"
  "d.History.PoolsForLocation\022\020\n\010timestep\030\002"
  " \001(\005\032\314\002\n\020PoolsForLocation\022\n\n\002id\030\001 \001(\005\022>\n"
  "\005pools\030\002 \003(\0132/.proto.EpiGeoGrid.History."
  "PoolsForLocation.Pool\032\353\001\n\004Pool\022\022\n\npercen"
  "tage\030\001 \003(\001\022B\n\004type\030\002 \001(\01624.proto.EpiGeoG"
  "rid.History.PoolsForLocation.Pool.Type\"\212"
  "\001\n\004Type\022\r\n\tK12School\020\000\022\024\n\020PrimaryCommuni"
  "ty\020\001\022\026\n\022SecondaryCommunity\020\002\022\013\n\007College\020"
  "\003\022\r\n\tHousehold\020\004\022\r\n\tWorkplace\020\005\022\013\n\007Dayca"
  "re\020\006\022\r\n\tPreSchool\020\007b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_epigeogrid_2eproto = {
  false, InitDefaults_epigeogrid_2eproto, 
  descriptor_table_protodef_epigeogrid_2eproto,
  "epigeogrid.proto", &assign_descriptors_table_epigeogrid_2eproto, 747,
};

void AddDescriptors_epigeogrid_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_epigeogrid_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_epigeogrid_2eproto = []() { AddDescriptors_epigeogrid_2eproto(); return true; }();
namespace proto {
const ::google::protobuf::EnumDescriptor* EpiGeoGrid_History_PoolsForLocation_Pool_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_epigeogrid_2eproto);
  return file_level_enum_descriptors_epigeogrid_2eproto[0];
}
bool EpiGeoGrid_History_PoolsForLocation_Pool_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const EpiGeoGrid_History_PoolsForLocation_Pool_Type EpiGeoGrid_History_PoolsForLocation_Pool::K12School;
const EpiGeoGrid_History_PoolsForLocation_Pool_Type EpiGeoGrid_History_PoolsForLocation_Pool::PrimaryCommunity;
const EpiGeoGrid_History_PoolsForLocation_Pool_Type EpiGeoGrid_History_PoolsForLocation_Pool::SecondaryCommunity;
const EpiGeoGrid_History_PoolsForLocation_Pool_Type EpiGeoGrid_History_PoolsForLocation_Pool::College;
const EpiGeoGrid_History_PoolsForLocation_Pool_Type EpiGeoGrid_History_PoolsForLocation_Pool::Household;
const EpiGeoGrid_History_PoolsForLocation_Pool_Type EpiGeoGrid_History_PoolsForLocation_Pool::Workplace;
const EpiGeoGrid_History_PoolsForLocation_Pool_Type EpiGeoGrid_History_PoolsForLocation_Pool::Daycare;
const EpiGeoGrid_History_PoolsForLocation_Pool_Type EpiGeoGrid_History_PoolsForLocation_Pool::PreSchool;
const EpiGeoGrid_History_PoolsForLocation_Pool_Type EpiGeoGrid_History_PoolsForLocation_Pool::Type_MIN;
const EpiGeoGrid_History_PoolsForLocation_Pool_Type EpiGeoGrid_History_PoolsForLocation_Pool::Type_MAX;
const int EpiGeoGrid_History_PoolsForLocation_Pool::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void EpiGeoGrid_Location_Coordinates::InitAsDefaultInstance() {
}
class EpiGeoGrid_Location_Coordinates::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EpiGeoGrid_Location_Coordinates::kLatitudeFieldNumber;
const int EpiGeoGrid_Location_Coordinates::kLongitudeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EpiGeoGrid_Location_Coordinates::EpiGeoGrid_Location_Coordinates()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.EpiGeoGrid.Location.Coordinates)
}
EpiGeoGrid_Location_Coordinates::EpiGeoGrid_Location_Coordinates(const EpiGeoGrid_Location_Coordinates& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&longitude_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
  // @@protoc_insertion_point(copy_constructor:proto.EpiGeoGrid.Location.Coordinates)
}

void EpiGeoGrid_Location_Coordinates::SharedCtor() {
  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&longitude_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
}

EpiGeoGrid_Location_Coordinates::~EpiGeoGrid_Location_Coordinates() {
  // @@protoc_insertion_point(destructor:proto.EpiGeoGrid.Location.Coordinates)
  SharedDtor();
}

void EpiGeoGrid_Location_Coordinates::SharedDtor() {
}

void EpiGeoGrid_Location_Coordinates::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EpiGeoGrid_Location_Coordinates& EpiGeoGrid_Location_Coordinates::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EpiGeoGrid_Location_Coordinates_epigeogrid_2eproto.base);
  return *internal_default_instance();
}


void EpiGeoGrid_Location_Coordinates::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.EpiGeoGrid.Location.Coordinates)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&longitude_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EpiGeoGrid_Location_Coordinates::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EpiGeoGrid_Location_Coordinates*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // double latitude = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_latitude(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double longitude = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_longitude(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EpiGeoGrid_Location_Coordinates::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.EpiGeoGrid.Location.Coordinates)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double latitude = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double longitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.EpiGeoGrid.Location.Coordinates)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.EpiGeoGrid.Location.Coordinates)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EpiGeoGrid_Location_Coordinates::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.EpiGeoGrid.Location.Coordinates)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double latitude = 1;
  if (this->latitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->latitude(), output);
  }

  // double longitude = 2;
  if (this->longitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->longitude(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.EpiGeoGrid.Location.Coordinates)
}

::google::protobuf::uint8* EpiGeoGrid_Location_Coordinates::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.EpiGeoGrid.Location.Coordinates)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double latitude = 1;
  if (this->latitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->latitude(), target);
  }

  // double longitude = 2;
  if (this->longitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->longitude(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.EpiGeoGrid.Location.Coordinates)
  return target;
}

size_t EpiGeoGrid_Location_Coordinates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.EpiGeoGrid.Location.Coordinates)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double latitude = 1;
  if (this->latitude() != 0) {
    total_size += 1 + 8;
  }

  // double longitude = 2;
  if (this->longitude() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EpiGeoGrid_Location_Coordinates::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.EpiGeoGrid.Location.Coordinates)
  GOOGLE_DCHECK_NE(&from, this);
  const EpiGeoGrid_Location_Coordinates* source =
      ::google::protobuf::DynamicCastToGenerated<EpiGeoGrid_Location_Coordinates>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.EpiGeoGrid.Location.Coordinates)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.EpiGeoGrid.Location.Coordinates)
    MergeFrom(*source);
  }
}

void EpiGeoGrid_Location_Coordinates::MergeFrom(const EpiGeoGrid_Location_Coordinates& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.EpiGeoGrid.Location.Coordinates)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.latitude() != 0) {
    set_latitude(from.latitude());
  }
  if (from.longitude() != 0) {
    set_longitude(from.longitude());
  }
}

void EpiGeoGrid_Location_Coordinates::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.EpiGeoGrid.Location.Coordinates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EpiGeoGrid_Location_Coordinates::CopyFrom(const EpiGeoGrid_Location_Coordinates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.EpiGeoGrid.Location.Coordinates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EpiGeoGrid_Location_Coordinates::IsInitialized() const {
  return true;
}

void EpiGeoGrid_Location_Coordinates::Swap(EpiGeoGrid_Location_Coordinates* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EpiGeoGrid_Location_Coordinates::InternalSwap(EpiGeoGrid_Location_Coordinates* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(latitude_, other->latitude_);
  swap(longitude_, other->longitude_);
}

::google::protobuf::Metadata EpiGeoGrid_Location_Coordinates::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_epigeogrid_2eproto);
  return ::file_level_metadata_epigeogrid_2eproto[kIndexInFileMessages];
}


// ===================================================================

void EpiGeoGrid_Location::InitAsDefaultInstance() {
  ::proto::_EpiGeoGrid_Location_default_instance_._instance.get_mutable()->coordinates_ = const_cast< ::proto::EpiGeoGrid_Location_Coordinates*>(
      ::proto::EpiGeoGrid_Location_Coordinates::internal_default_instance());
}
class EpiGeoGrid_Location::HasBitSetters {
 public:
  static const ::proto::EpiGeoGrid_Location_Coordinates& coordinates(const EpiGeoGrid_Location* msg);
};

const ::proto::EpiGeoGrid_Location_Coordinates&
EpiGeoGrid_Location::HasBitSetters::coordinates(const EpiGeoGrid_Location* msg) {
  return *msg->coordinates_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EpiGeoGrid_Location::kIdFieldNumber;
const int EpiGeoGrid_Location::kNameFieldNumber;
const int EpiGeoGrid_Location::kPopulationFieldNumber;
const int EpiGeoGrid_Location::kCoordinatesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EpiGeoGrid_Location::EpiGeoGrid_Location()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.EpiGeoGrid.Location)
}
EpiGeoGrid_Location::EpiGeoGrid_Location(const EpiGeoGrid_Location& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_coordinates()) {
    coordinates_ = new ::proto::EpiGeoGrid_Location_Coordinates(*from.coordinates_);
  } else {
    coordinates_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&population_) -
    reinterpret_cast<char*>(&id_)) + sizeof(population_));
  // @@protoc_insertion_point(copy_constructor:proto.EpiGeoGrid.Location)
}

void EpiGeoGrid_Location::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_EpiGeoGrid_Location_epigeogrid_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&coordinates_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&population_) -
      reinterpret_cast<char*>(&coordinates_)) + sizeof(population_));
}

EpiGeoGrid_Location::~EpiGeoGrid_Location() {
  // @@protoc_insertion_point(destructor:proto.EpiGeoGrid.Location)
  SharedDtor();
}

void EpiGeoGrid_Location::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete coordinates_;
}

void EpiGeoGrid_Location::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EpiGeoGrid_Location& EpiGeoGrid_Location::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EpiGeoGrid_Location_epigeogrid_2eproto.base);
  return *internal_default_instance();
}


void EpiGeoGrid_Location::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.EpiGeoGrid.Location)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && coordinates_ != nullptr) {
    delete coordinates_;
  }
  coordinates_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&population_) -
      reinterpret_cast<char*>(&id_)) + sizeof(population_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EpiGeoGrid_Location::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EpiGeoGrid_Location*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.EpiGeoGrid.Location.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 population = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_population(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .proto.EpiGeoGrid.Location.Coordinates coordinates = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::EpiGeoGrid_Location_Coordinates::_InternalParse;
        object = msg->mutable_coordinates();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EpiGeoGrid_Location::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.EpiGeoGrid.Location)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.EpiGeoGrid.Location.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 population = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &population_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.EpiGeoGrid.Location.Coordinates coordinates = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_coordinates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.EpiGeoGrid.Location)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.EpiGeoGrid.Location)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EpiGeoGrid_Location::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.EpiGeoGrid.Location)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.EpiGeoGrid.Location.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // int32 population = 3;
  if (this->population() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->population(), output);
  }

  // .proto.EpiGeoGrid.Location.Coordinates coordinates = 4;
  if (this->has_coordinates()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::coordinates(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.EpiGeoGrid.Location)
}

::google::protobuf::uint8* EpiGeoGrid_Location::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.EpiGeoGrid.Location)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.EpiGeoGrid.Location.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // int32 population = 3;
  if (this->population() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->population(), target);
  }

  // .proto.EpiGeoGrid.Location.Coordinates coordinates = 4;
  if (this->has_coordinates()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::coordinates(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.EpiGeoGrid.Location)
  return target;
}

size_t EpiGeoGrid_Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.EpiGeoGrid.Location)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .proto.EpiGeoGrid.Location.Coordinates coordinates = 4;
  if (this->has_coordinates()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *coordinates_);
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 population = 3;
  if (this->population() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->population());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EpiGeoGrid_Location::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.EpiGeoGrid.Location)
  GOOGLE_DCHECK_NE(&from, this);
  const EpiGeoGrid_Location* source =
      ::google::protobuf::DynamicCastToGenerated<EpiGeoGrid_Location>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.EpiGeoGrid.Location)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.EpiGeoGrid.Location)
    MergeFrom(*source);
  }
}

void EpiGeoGrid_Location::MergeFrom(const EpiGeoGrid_Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.EpiGeoGrid.Location)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_coordinates()) {
    mutable_coordinates()->::proto::EpiGeoGrid_Location_Coordinates::MergeFrom(from.coordinates());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.population() != 0) {
    set_population(from.population());
  }
}

void EpiGeoGrid_Location::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.EpiGeoGrid.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EpiGeoGrid_Location::CopyFrom(const EpiGeoGrid_Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.EpiGeoGrid.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EpiGeoGrid_Location::IsInitialized() const {
  return true;
}

void EpiGeoGrid_Location::Swap(EpiGeoGrid_Location* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EpiGeoGrid_Location::InternalSwap(EpiGeoGrid_Location* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(coordinates_, other->coordinates_);
  swap(id_, other->id_);
  swap(population_, other->population_);
}

::google::protobuf::Metadata EpiGeoGrid_Location::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_epigeogrid_2eproto);
  return ::file_level_metadata_epigeogrid_2eproto[kIndexInFileMessages];
}


// ===================================================================

void EpiGeoGrid_History_PoolsForLocation_Pool::InitAsDefaultInstance() {
}
class EpiGeoGrid_History_PoolsForLocation_Pool::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EpiGeoGrid_History_PoolsForLocation_Pool::kPercentageFieldNumber;
const int EpiGeoGrid_History_PoolsForLocation_Pool::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EpiGeoGrid_History_PoolsForLocation_Pool::EpiGeoGrid_History_PoolsForLocation_Pool()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.EpiGeoGrid.History.PoolsForLocation.Pool)
}
EpiGeoGrid_History_PoolsForLocation_Pool::EpiGeoGrid_History_PoolsForLocation_Pool(const EpiGeoGrid_History_PoolsForLocation_Pool& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      percentage_(from.percentage_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:proto.EpiGeoGrid.History.PoolsForLocation.Pool)
}

void EpiGeoGrid_History_PoolsForLocation_Pool::SharedCtor() {
  type_ = 0;
}

EpiGeoGrid_History_PoolsForLocation_Pool::~EpiGeoGrid_History_PoolsForLocation_Pool() {
  // @@protoc_insertion_point(destructor:proto.EpiGeoGrid.History.PoolsForLocation.Pool)
  SharedDtor();
}

void EpiGeoGrid_History_PoolsForLocation_Pool::SharedDtor() {
}

void EpiGeoGrid_History_PoolsForLocation_Pool::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EpiGeoGrid_History_PoolsForLocation_Pool& EpiGeoGrid_History_PoolsForLocation_Pool::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EpiGeoGrid_History_PoolsForLocation_Pool_epigeogrid_2eproto.base);
  return *internal_default_instance();
}


void EpiGeoGrid_History_PoolsForLocation_Pool::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.EpiGeoGrid.History.PoolsForLocation.Pool)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  percentage_.Clear();
  type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EpiGeoGrid_History_PoolsForLocation_Pool::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EpiGeoGrid_History_PoolsForLocation_Pool*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated double percentage = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 10) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedDoubleParser;
          object = msg->mutable_percentage();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        do {
          msg->add_percentage(::google::protobuf::io::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 9 && (ptr += 1));
        break;
      }
      // .proto.EpiGeoGrid.History.PoolsForLocation.Pool.Type type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_type(static_cast<::proto::EpiGeoGrid_History_PoolsForLocation_Pool_Type>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EpiGeoGrid_History_PoolsForLocation_Pool::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.EpiGeoGrid.History.PoolsForLocation.Pool)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double percentage = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_percentage())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 10u, input, this->mutable_percentage())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.EpiGeoGrid.History.PoolsForLocation.Pool.Type type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::proto::EpiGeoGrid_History_PoolsForLocation_Pool_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.EpiGeoGrid.History.PoolsForLocation.Pool)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.EpiGeoGrid.History.PoolsForLocation.Pool)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EpiGeoGrid_History_PoolsForLocation_Pool::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.EpiGeoGrid.History.PoolsForLocation.Pool)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double percentage = 1;
  if (this->percentage_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_percentage_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->percentage().data(), this->percentage_size(), output);
  }

  // .proto.EpiGeoGrid.History.PoolsForLocation.Pool.Type type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.EpiGeoGrid.History.PoolsForLocation.Pool)
}

::google::protobuf::uint8* EpiGeoGrid_History_PoolsForLocation_Pool::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.EpiGeoGrid.History.PoolsForLocation.Pool)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double percentage = 1;
  if (this->percentage_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _percentage_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->percentage_, target);
  }

  // .proto.EpiGeoGrid.History.PoolsForLocation.Pool.Type type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.EpiGeoGrid.History.PoolsForLocation.Pool)
  return target;
}

size_t EpiGeoGrid_History_PoolsForLocation_Pool::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.EpiGeoGrid.History.PoolsForLocation.Pool)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double percentage = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->percentage_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _percentage_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .proto.EpiGeoGrid.History.PoolsForLocation.Pool.Type type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EpiGeoGrid_History_PoolsForLocation_Pool::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.EpiGeoGrid.History.PoolsForLocation.Pool)
  GOOGLE_DCHECK_NE(&from, this);
  const EpiGeoGrid_History_PoolsForLocation_Pool* source =
      ::google::protobuf::DynamicCastToGenerated<EpiGeoGrid_History_PoolsForLocation_Pool>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.EpiGeoGrid.History.PoolsForLocation.Pool)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.EpiGeoGrid.History.PoolsForLocation.Pool)
    MergeFrom(*source);
  }
}

void EpiGeoGrid_History_PoolsForLocation_Pool::MergeFrom(const EpiGeoGrid_History_PoolsForLocation_Pool& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.EpiGeoGrid.History.PoolsForLocation.Pool)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  percentage_.MergeFrom(from.percentage_);
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void EpiGeoGrid_History_PoolsForLocation_Pool::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.EpiGeoGrid.History.PoolsForLocation.Pool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EpiGeoGrid_History_PoolsForLocation_Pool::CopyFrom(const EpiGeoGrid_History_PoolsForLocation_Pool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.EpiGeoGrid.History.PoolsForLocation.Pool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EpiGeoGrid_History_PoolsForLocation_Pool::IsInitialized() const {
  return true;
}

void EpiGeoGrid_History_PoolsForLocation_Pool::Swap(EpiGeoGrid_History_PoolsForLocation_Pool* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EpiGeoGrid_History_PoolsForLocation_Pool::InternalSwap(EpiGeoGrid_History_PoolsForLocation_Pool* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  percentage_.InternalSwap(&other->percentage_);
  swap(type_, other->type_);
}

::google::protobuf::Metadata EpiGeoGrid_History_PoolsForLocation_Pool::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_epigeogrid_2eproto);
  return ::file_level_metadata_epigeogrid_2eproto[kIndexInFileMessages];
}


// ===================================================================

void EpiGeoGrid_History_PoolsForLocation::InitAsDefaultInstance() {
}
class EpiGeoGrid_History_PoolsForLocation::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EpiGeoGrid_History_PoolsForLocation::kIdFieldNumber;
const int EpiGeoGrid_History_PoolsForLocation::kPoolsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EpiGeoGrid_History_PoolsForLocation::EpiGeoGrid_History_PoolsForLocation()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.EpiGeoGrid.History.PoolsForLocation)
}
EpiGeoGrid_History_PoolsForLocation::EpiGeoGrid_History_PoolsForLocation(const EpiGeoGrid_History_PoolsForLocation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      pools_(from.pools_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:proto.EpiGeoGrid.History.PoolsForLocation)
}

void EpiGeoGrid_History_PoolsForLocation::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_EpiGeoGrid_History_PoolsForLocation_epigeogrid_2eproto.base);
  id_ = 0;
}

EpiGeoGrid_History_PoolsForLocation::~EpiGeoGrid_History_PoolsForLocation() {
  // @@protoc_insertion_point(destructor:proto.EpiGeoGrid.History.PoolsForLocation)
  SharedDtor();
}

void EpiGeoGrid_History_PoolsForLocation::SharedDtor() {
}

void EpiGeoGrid_History_PoolsForLocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EpiGeoGrid_History_PoolsForLocation& EpiGeoGrid_History_PoolsForLocation::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EpiGeoGrid_History_PoolsForLocation_epigeogrid_2eproto.base);
  return *internal_default_instance();
}


void EpiGeoGrid_History_PoolsForLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.EpiGeoGrid.History.PoolsForLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pools_.Clear();
  id_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EpiGeoGrid_History_PoolsForLocation::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EpiGeoGrid_History_PoolsForLocation*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.EpiGeoGrid.History.PoolsForLocation.Pool pools = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::EpiGeoGrid_History_PoolsForLocation_Pool::_InternalParse;
          object = msg->add_pools();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EpiGeoGrid_History_PoolsForLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.EpiGeoGrid.History.PoolsForLocation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.EpiGeoGrid.History.PoolsForLocation.Pool pools = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_pools()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.EpiGeoGrid.History.PoolsForLocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.EpiGeoGrid.History.PoolsForLocation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EpiGeoGrid_History_PoolsForLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.EpiGeoGrid.History.PoolsForLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated .proto.EpiGeoGrid.History.PoolsForLocation.Pool pools = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pools_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->pools(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.EpiGeoGrid.History.PoolsForLocation)
}

::google::protobuf::uint8* EpiGeoGrid_History_PoolsForLocation::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.EpiGeoGrid.History.PoolsForLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated .proto.EpiGeoGrid.History.PoolsForLocation.Pool pools = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pools_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->pools(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.EpiGeoGrid.History.PoolsForLocation)
  return target;
}

size_t EpiGeoGrid_History_PoolsForLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.EpiGeoGrid.History.PoolsForLocation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.EpiGeoGrid.History.PoolsForLocation.Pool pools = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->pools_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->pools(static_cast<int>(i)));
    }
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EpiGeoGrid_History_PoolsForLocation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.EpiGeoGrid.History.PoolsForLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const EpiGeoGrid_History_PoolsForLocation* source =
      ::google::protobuf::DynamicCastToGenerated<EpiGeoGrid_History_PoolsForLocation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.EpiGeoGrid.History.PoolsForLocation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.EpiGeoGrid.History.PoolsForLocation)
    MergeFrom(*source);
  }
}

void EpiGeoGrid_History_PoolsForLocation::MergeFrom(const EpiGeoGrid_History_PoolsForLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.EpiGeoGrid.History.PoolsForLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pools_.MergeFrom(from.pools_);
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void EpiGeoGrid_History_PoolsForLocation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.EpiGeoGrid.History.PoolsForLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EpiGeoGrid_History_PoolsForLocation::CopyFrom(const EpiGeoGrid_History_PoolsForLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.EpiGeoGrid.History.PoolsForLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EpiGeoGrid_History_PoolsForLocation::IsInitialized() const {
  return true;
}

void EpiGeoGrid_History_PoolsForLocation::Swap(EpiGeoGrid_History_PoolsForLocation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EpiGeoGrid_History_PoolsForLocation::InternalSwap(EpiGeoGrid_History_PoolsForLocation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&pools_)->InternalSwap(CastToBase(&other->pools_));
  swap(id_, other->id_);
}

::google::protobuf::Metadata EpiGeoGrid_History_PoolsForLocation::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_epigeogrid_2eproto);
  return ::file_level_metadata_epigeogrid_2eproto[kIndexInFileMessages];
}


// ===================================================================

void EpiGeoGrid_History::InitAsDefaultInstance() {
}
class EpiGeoGrid_History::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EpiGeoGrid_History::kPoolsForLocationsFieldNumber;
const int EpiGeoGrid_History::kTimestepFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EpiGeoGrid_History::EpiGeoGrid_History()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.EpiGeoGrid.History)
}
EpiGeoGrid_History::EpiGeoGrid_History(const EpiGeoGrid_History& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      poolsforlocations_(from.poolsforlocations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestep_ = from.timestep_;
  // @@protoc_insertion_point(copy_constructor:proto.EpiGeoGrid.History)
}

void EpiGeoGrid_History::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_EpiGeoGrid_History_epigeogrid_2eproto.base);
  timestep_ = 0;
}

EpiGeoGrid_History::~EpiGeoGrid_History() {
  // @@protoc_insertion_point(destructor:proto.EpiGeoGrid.History)
  SharedDtor();
}

void EpiGeoGrid_History::SharedDtor() {
}

void EpiGeoGrid_History::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EpiGeoGrid_History& EpiGeoGrid_History::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EpiGeoGrid_History_epigeogrid_2eproto.base);
  return *internal_default_instance();
}


void EpiGeoGrid_History::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.EpiGeoGrid.History)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  poolsforlocations_.Clear();
  timestep_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EpiGeoGrid_History::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EpiGeoGrid_History*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.EpiGeoGrid.History.PoolsForLocation PoolsForLocations = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::EpiGeoGrid_History_PoolsForLocation::_InternalParse;
          object = msg->add_poolsforlocations();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // int32 timestep = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_timestep(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EpiGeoGrid_History::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.EpiGeoGrid.History)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.EpiGeoGrid.History.PoolsForLocation PoolsForLocations = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_poolsforlocations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 timestep = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestep_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.EpiGeoGrid.History)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.EpiGeoGrid.History)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EpiGeoGrid_History::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.EpiGeoGrid.History)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.EpiGeoGrid.History.PoolsForLocation PoolsForLocations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->poolsforlocations_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->poolsforlocations(static_cast<int>(i)),
      output);
  }

  // int32 timestep = 2;
  if (this->timestep() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->timestep(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.EpiGeoGrid.History)
}

::google::protobuf::uint8* EpiGeoGrid_History::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.EpiGeoGrid.History)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.EpiGeoGrid.History.PoolsForLocation PoolsForLocations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->poolsforlocations_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->poolsforlocations(static_cast<int>(i)), target);
  }

  // int32 timestep = 2;
  if (this->timestep() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->timestep(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.EpiGeoGrid.History)
  return target;
}

size_t EpiGeoGrid_History::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.EpiGeoGrid.History)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.EpiGeoGrid.History.PoolsForLocation PoolsForLocations = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->poolsforlocations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->poolsforlocations(static_cast<int>(i)));
    }
  }

  // int32 timestep = 2;
  if (this->timestep() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->timestep());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EpiGeoGrid_History::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.EpiGeoGrid.History)
  GOOGLE_DCHECK_NE(&from, this);
  const EpiGeoGrid_History* source =
      ::google::protobuf::DynamicCastToGenerated<EpiGeoGrid_History>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.EpiGeoGrid.History)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.EpiGeoGrid.History)
    MergeFrom(*source);
  }
}

void EpiGeoGrid_History::MergeFrom(const EpiGeoGrid_History& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.EpiGeoGrid.History)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  poolsforlocations_.MergeFrom(from.poolsforlocations_);
  if (from.timestep() != 0) {
    set_timestep(from.timestep());
  }
}

void EpiGeoGrid_History::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.EpiGeoGrid.History)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EpiGeoGrid_History::CopyFrom(const EpiGeoGrid_History& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.EpiGeoGrid.History)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EpiGeoGrid_History::IsInitialized() const {
  return true;
}

void EpiGeoGrid_History::Swap(EpiGeoGrid_History* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EpiGeoGrid_History::InternalSwap(EpiGeoGrid_History* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&poolsforlocations_)->InternalSwap(CastToBase(&other->poolsforlocations_));
  swap(timestep_, other->timestep_);
}

::google::protobuf::Metadata EpiGeoGrid_History::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_epigeogrid_2eproto);
  return ::file_level_metadata_epigeogrid_2eproto[kIndexInFileMessages];
}


// ===================================================================

void EpiGeoGrid::InitAsDefaultInstance() {
}
class EpiGeoGrid::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EpiGeoGrid::kLocationsFieldNumber;
const int EpiGeoGrid::kHistoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EpiGeoGrid::EpiGeoGrid()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.EpiGeoGrid)
}
EpiGeoGrid::EpiGeoGrid(const EpiGeoGrid& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      locations_(from.locations_),
      history_(from.history_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.EpiGeoGrid)
}

void EpiGeoGrid::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_EpiGeoGrid_epigeogrid_2eproto.base);
}

EpiGeoGrid::~EpiGeoGrid() {
  // @@protoc_insertion_point(destructor:proto.EpiGeoGrid)
  SharedDtor();
}

void EpiGeoGrid::SharedDtor() {
}

void EpiGeoGrid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EpiGeoGrid& EpiGeoGrid::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EpiGeoGrid_epigeogrid_2eproto.base);
  return *internal_default_instance();
}


void EpiGeoGrid::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.EpiGeoGrid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  locations_.Clear();
  history_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EpiGeoGrid::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EpiGeoGrid*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.EpiGeoGrid.Location Locations = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::EpiGeoGrid_Location::_InternalParse;
          object = msg->add_locations();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // repeated .proto.EpiGeoGrid.History history = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::EpiGeoGrid_History::_InternalParse;
          object = msg->add_history();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EpiGeoGrid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.EpiGeoGrid)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.EpiGeoGrid.Location Locations = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_locations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.EpiGeoGrid.History history = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_history()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.EpiGeoGrid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.EpiGeoGrid)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EpiGeoGrid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.EpiGeoGrid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.EpiGeoGrid.Location Locations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->locations_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->locations(static_cast<int>(i)),
      output);
  }

  // repeated .proto.EpiGeoGrid.History history = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->history_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->history(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.EpiGeoGrid)
}

::google::protobuf::uint8* EpiGeoGrid::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.EpiGeoGrid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.EpiGeoGrid.Location Locations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->locations_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->locations(static_cast<int>(i)), target);
  }

  // repeated .proto.EpiGeoGrid.History history = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->history_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->history(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.EpiGeoGrid)
  return target;
}

size_t EpiGeoGrid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.EpiGeoGrid)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.EpiGeoGrid.Location Locations = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->locations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->locations(static_cast<int>(i)));
    }
  }

  // repeated .proto.EpiGeoGrid.History history = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->history_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->history(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EpiGeoGrid::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.EpiGeoGrid)
  GOOGLE_DCHECK_NE(&from, this);
  const EpiGeoGrid* source =
      ::google::protobuf::DynamicCastToGenerated<EpiGeoGrid>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.EpiGeoGrid)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.EpiGeoGrid)
    MergeFrom(*source);
  }
}

void EpiGeoGrid::MergeFrom(const EpiGeoGrid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.EpiGeoGrid)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  locations_.MergeFrom(from.locations_);
  history_.MergeFrom(from.history_);
}

void EpiGeoGrid::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.EpiGeoGrid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EpiGeoGrid::CopyFrom(const EpiGeoGrid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.EpiGeoGrid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EpiGeoGrid::IsInitialized() const {
  return true;
}

void EpiGeoGrid::Swap(EpiGeoGrid* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EpiGeoGrid::InternalSwap(EpiGeoGrid* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&locations_)->InternalSwap(CastToBase(&other->locations_));
  CastToBase(&history_)->InternalSwap(CastToBase(&other->history_));
}

::google::protobuf::Metadata EpiGeoGrid::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_epigeogrid_2eproto);
  return ::file_level_metadata_epigeogrid_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::proto::EpiGeoGrid_Location_Coordinates* Arena::CreateMaybeMessage< ::proto::EpiGeoGrid_Location_Coordinates >(Arena* arena) {
  return Arena::CreateInternal< ::proto::EpiGeoGrid_Location_Coordinates >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::EpiGeoGrid_Location* Arena::CreateMaybeMessage< ::proto::EpiGeoGrid_Location >(Arena* arena) {
  return Arena::CreateInternal< ::proto::EpiGeoGrid_Location >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::EpiGeoGrid_History_PoolsForLocation_Pool* Arena::CreateMaybeMessage< ::proto::EpiGeoGrid_History_PoolsForLocation_Pool >(Arena* arena) {
  return Arena::CreateInternal< ::proto::EpiGeoGrid_History_PoolsForLocation_Pool >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::EpiGeoGrid_History_PoolsForLocation* Arena::CreateMaybeMessage< ::proto::EpiGeoGrid_History_PoolsForLocation >(Arena* arena) {
  return Arena::CreateInternal< ::proto::EpiGeoGrid_History_PoolsForLocation >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::EpiGeoGrid_History* Arena::CreateMaybeMessage< ::proto::EpiGeoGrid_History >(Arena* arena) {
  return Arena::CreateInternal< ::proto::EpiGeoGrid_History >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::EpiGeoGrid* Arena::CreateMaybeMessage< ::proto::EpiGeoGrid >(Arena* arena) {
  return Arena::CreateInternal< ::proto::EpiGeoGrid >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
